C FILTER.FOR- FILMAN GENERAL-PURPOSE DIGITAL FILTERING ROUTINE, BASED 

C ON STEARNS & DAVID CHAPTERS 6&7. INITIAL VERSION 1/93 ALLOWS 

C CONSTRUCTION OF WIDE VARIETY OF CHEBY1, CHEB2, & BUTTERWORTH FILTERS

C FOR LOWPASS, HIGHPASS, BANDPASS, OR BANDSTOP FILTERING. OPTIONAL

C FORWARD/BACKWARD FILTERING TO ELIMINATE PHASE SHIFTS, PLUS OPTIONAL

C DECIMATION OF FILTER OUTPUT ADDED 6/93. POSSIBLE FURTHER ENHANCEMENTS

C MIGHT INCLUDE (1) INITIALIZATION OF THE FILTER TO STEADY-STATE 

C VIA KAY'S 'STEPDOWN' OR SIMILAR; AND (2) ADDITION OF AT LEAST ONE 

C OPTIONAL FILTER SO AS TO PERMIT EXTRACTION OF 2 OR MORE HARMONICS

C BY COMBINATION OF BRACKETING BANDPASS WITH LIMITING BANDSTOP FILTERS.

C 10/14/94 ADDED BUTTERWORTH HP-LP SEQUENTIAL ROUTINE FOR USE WITH MATLAB

C DIRECT TYPE II TRANSPOSED FILTER WITH INITAL CONDITIONS, PREPENDING 

C AND REVERSE FILTERING

	SUBROUTINE FILTER

	DOUBLE PRECISION AH(20),BH(20),AL(20),BL(20),PVH(20),PVL(20)

	DOUBLE PRECISION COEFF(84),ZI(20)

	DIMENSION WORK(32768),WORK0(0:32767),A(4,6),B(0:4,6),CF(4),

     + PX(0:4,6),PY(4,6)

	COMMON IFLAG1,IFLAG2,IFLAG3,KNT,ISZ,ICHAN(1)

	COMMON/DEV/ITI

	COMMON/FLDESO/ NGO,NAO,NCO,NDO,NFO,NLO,NRO,ISO,IBUFO(1)

	COMMON/FLDES/ NG,NA,NC,ND,NF,NL,NR,IS,IBUF(1)

	EQUIVALENCE (WORK,IBUFO(121)),(WORK,WORK0)

	EQUIVALENCE (CF1,CF(1)),(CF2,CF(2)),(CF3,CF(3)),(CF4,CF(4))        

	DATA AH/20*0D0/,BH/20*0D0/,AL/20*0D0/,BL/20*0D0/

	DATA PVH/20*0D0/,PVL/20*0D0/

	IF(IFLAG1) 10,30,80

10    NFO=3 ! DECIDED TO MAKE OUTPUT ALWAYS REAL TO AVOID QUANTIZATION

C MOVE OUPUT CHANNEL LABELS

	J=6*NGO+109             ! OF LOW-POWER FILTER OUTPUTS

	DO 12 I=1,NCO

	L=J+5

	K=6*(NG+ICHAN(I))-5

	DO 5 I1=J,L

	IBUFO(I1)=IBUF(K)

5     K=K+1

12    J=J+6

	ISZ=120+NDO

	NID=NGO+NAO

	J1=120-NID+1  ! FIRST WORD OF OUTPUT RECORD

C DESIGN DIGITAL FILTER USING STEARNS & DAVID'S ROUTINES

13    WRITE(ITI,100)

100   FORMAT('$FILTER TYPE:1=CHEBY1/2=CHEBY2/3=BUTTERWORTH/4=BUTTERWORTH

     & HP-LP >'\)

	READ(ITI,*)IFILT

	IF(IFILT.LT.1 .OR. IFILT.GT.4)GO TO 13

	IF(IFILT.EQ.4)GO TO 26

14    LS=4  ! LENGTH OF THE FILTER SECTIONS

	WRITE(ITI,101)

101   FORMAT('$CHARACTERISTIC:1=LOWPASS/2=HIGHPASS/3=BANDPASS/',

     + '4=BANDSTOP >'\)

	READ(ITI,*)IBAND

	IF(IBAND.LT.1 .OR. IBAND.GT.4)GO TO 14

	IF(IBAND.LT.3)LS=2            

	WRITE(ITI,102)

102   FORMAT('$LOWER, UPPER CRITICAL FREQS(SEE S&D P.325) >'\)      

	READ(ITI,*)(CF(I),I=1,4)

C CONVERT TO HZ-SECONDS FOR DESIGN ROUTINES

	DO 16 I=1,4

16    CF(I)=CF(I)/FLOAT(ISO)

	WRITE(ITI,103)

103   FORMAT('$# FILTER SECTIONS(.LE.6), REJECTION IN DB(>3) >'\)

	READ(ITI,*)NS,NB

	CALL SPIIRD(IFILT,IBAND,NS,LS,CF1,CF2,CF3,CF4,DB,B,A,IERR)

	IF(IERR.EQ.0)GO TO 20

	WRITE(ITI,104)IERR

104   FORMAT(' DESIGN PROBLEM #',I3,'; REDO SPECS(SEE S&D P.153)')

	GO TO 13

C REPORT THE COEFFICIENTS

20    WRITE(ITI,*)' FILTER COEFFICIENTS:'

	DO 25 J=1,NS

	WRITE(ITI,105)J,(B(I,J),I=0,LS)

105   FORMAT(/' SECTION',I2,' NUM:',5F10.4)

	WRITE(ITI,106)(A(I,J),I=1,LS)

106   FORMAT(9X,'DENOM:',10X,4F10.4)

25    CONTINUE

	WRITE(ITI,107)

107   FORMAT('$OK? >'\)

	READ(ITI,108)IA

108   FORMAT(A1)

	IF(IA.EQ.'N')GO TO 13

C FILTER DESIGN ACCEPTED, DETERMINE APPLICATION MODE

	IREV=1

	WRITE(ITI,109)

109   FORMAT('$APPLY FILTER IN BOTH DIRECTIONS? >'\)

	READ(ITI,108)IA

	IF(IA.EQ.'Y')IREV=2

26    NDO1=NDO                         

C  DETERMINE DECIMATION REGIME

      IDEC=0

      WRITE(ITI,110)

110     FORMAT('$DECIMATE FILTERED DATA? >'\)

	READ(ITI,108)IA

	IF(IA.NE.'Y')GO TO 120

	IDEC=1

	ISO1=ISO

	WRITE(ITI,111)ISO1

111   FORMAT('$ENTER FINAL SAMPLE RATE (.LE. ',I4,') >'\)

	READ(ITI,*)ISO

	IOFF=ISO1/ISO

	NDO=NDO/IOFF

120   RETURN

      IF(IFILT.EQ.4) GO TO 200

C RUNNING SECTION- FIRST COPY INPUT TO WORK AREA

30    K=1

	DO 35 L=1,NDO1

	CALL XVAL(L,XV,XI)

	WORK(K)=XV

35    K=K+1                 

C APPLY THE FILTER

	PX=0.

	PY=0.

	CALL SPCFLT(B,A,LS,NS,WORK0,NDO1,PX,PY,IERR)

	IF(IERR.EQ.0)GO TO 501

	WRITE(ITI,500)KNT,IBUF(1),IERR

500   FORMAT('$ERROR: RECSET',I5,' CHANNEL',I4,', SECTION',I2)

	PAUSE ' <CR> TO CONTINUE'

	GOTO 40

501     CONTINUE

	GO TO(40,600)IREV

C IF REQUESTED, REVERSE THE ORDER OF THE DATA AND RE-FILTER TO REMOVE

C THE PHASE SHIFT

600   DO 800 I1=1,NDO1/2

	TEMP=WORK(I1)

	WORK(I1)=WORK(NDO1-I1+1)

800     WORK(NDO1-I1+1)=TEMP

C  NOW PASS THROUGH THE FILTER FOR A SECOND TIME

C        PX=0.

C        PY=0.

	CALL SPCFLT(B,A,LS,NS,WORK0,NDO1,PX,PY,IERR)

	IF(IERR.EQ.0)GO TO 506

	WRITE(ITI,505)KNT,IBUF(1),IERR

505   FORMAT('$ERROR: RECSET',I5,' CHANNEL',I4,', SECTION',I2)

	PAUSE ' <CR> TO CONTINUE'

C  LAST STEP:  REVERSE AGAIN TO OBTAIN FINAL ORDER OF DATA

	 GOTO 40

506    CONTINUE

	DO 880 I2=1,NDO1/2

	TEMP=WORK(I2)

	WORK(I2)=WORK(NDO1-I2+1)

880     WORK(NDO1-I2+1)=TEMP

C COPY ID INFO, DECIMATE & WRITE RECORD

40    CONTINUE

C IF HP-LP READ COEFFS FROM DISK FILE

200   OPEN(6,FILE='C:\EEG\FILMAN\BHLCOEFF.DAT')

      READ(UNIT=6,FMT='(BN,84D25.2)',END=201,ERR=201)(COEFF(I),I=1,84)               

201   IBH=INT4(COEFF(1))

      IAH=INT4(COEFF(2))

      IBL=INT4(COEFF(3))

      IAL=INT4(COEFF(4))

      K=5

      DO 205 I=1,IBH

       BH(I)=COEFF(K)

205    K=K+1

      DO 210 I=1,IAH

       AH(I)=COEFF(K)

210    K=K+1

      DO 215 I=1,IBL

       BL(I)=COEFF(K)

215    K=K+1

      DO 220 I=1,IAL

       AL(I)=COEFF(K)

220    K=K+1

      CLOSE(6)

C INITIAL CONDS

      NFILT=MAX(IBH,IAH)

      DO 225 I=NFILT,1,-1

225    PVH(I)=PVH(I+1)+BH(I)-AH(I)

      NFACT=3.*(NFILT-1)

      NDO2=NDO1+NFACT

      K=NFACT+1

      DO 230 L=1,NDO1

       CALL XVAL(L,XV,XI)

       WORK(K)=XV

230   K=K+1

      WK=2.*WORK(NFACT+1)

      DO 235 I=0,NFACT-1

235   WORK(NFACT-I)=WK-WORK(NFACT+2+I)       

      DO 240 I=2,NFILT

240   ZI(I-1)=PVH(I)*WORK(1)

      CALL T2TFILT(BH,AH,IBH,IAH,WORK,NDO2,ZI,IERR)

      IF(IERR.EQ.0) GO TO 241

      WRITE(*,112)

112   FORMAT('$ERROR:FILTER RESPONSE EXCEEDS 1E10')      

241   WK=2*WORK(NDO2)

      DO 245 I=1,NFACT

245   WORK(NDO2+I)=WK-WORK(NDO2-I)

      NDO2=NDO2+NFACT

      DO 250 I=1,NDO2/2

       TEMP=WORK(I)

       WORK(I)=WORK(NDO2-I+1)

250   WORK(NDO2-I+1)=TEMP

      DO 255 I=2,NFILT

255   ZI(I-1)=PVH(I)*WORK(1)

      CALL T2TFILT(BH,AH,IBH,IAH,WORK,NDO2,ZI,IERR)

      IF(IERR.EQ.0)GO TO 256

      WRITE(*,112)

256   NFILT=MAX(IBL,IAL)

      DO 260 I=NFILT,1,-1

260   PVL(I)=PVL(I+1)+BL(I)-AL(I)

      DO 265 I=2,NFILT

265   ZI(I-1)=PVL(I)*WORK(1)

      CALL T2TFILT(BL,AL,IBL,IAL,WORK,NDO2,ZI,IERR)

      IF(IERR.EQ.0) GO TO 266

      WRITE(*,112)

266   DO 270 I=1,NDO2/2

       TEMP=WORK(I)

       WORK(I)=WORK(NDO2-I+1)

270   WORK(NDO2-I+1)=TEMP

      DO 275 I=2,NFILT

275   ZI(I-1)=PVL(I)*WORK(1)

      CALL T2TFILT(BL,AL,IBL,IAL,WORK,NDO2,ZI,IERR)

      IF(IERR.EQ.0)GO TO 276

      WRITE(*,112)

276   DO 280 I=1,NDO1

280   WORK(I)=WORK(NFACT+I)            

C COPY ID INFO, DECIMATE AND WRITE RECORD      

	J=J1

	DO 45 I=1,NID

	IBUFO(J)=IBUFO(I)

45    J=J+1

	IF(IDEC.EQ.0) GO TO 70

	L=1

	DO 60 J=2,NDO

	L=L+IOFF

60      WORK(J)=WORK(L)

70      CALL PUTSTD(IBUFO(J1))

80    RETURN

	END

																												                                                                                                                                                                                     



      SUBROUTINE T2TFILT(B,A,LB,LA,X,N,Z,IERROR)

C

C FILTERS N-POINT ARRAY IN PLACE USING TYPE II TRANSPOSED

C 

C B = ARRAY OF NUM COEFFICIENTS

C LA = ARRAY OF DENOM COEFFICIENTS

C LB = LENGTH OF B, LA = LENGTH OF A

C X = DATA TO BE FILTERED

C N = LENGTH OF X

C Z = INITIAL CONDITIONS OF DELAYS

C

      DOUBLE PRECISION XD,YD,B(LB),A(LA),Z(20)

      DIMENSION X(N)

      IERROR=1

      NF=MAX(LA,LB)

      DO 10 K=1,N

       XD=DBLE(X(K))

       YD=B(1)*XD+Z(1)

       DO 5 I=1,NF-1

        Z(I)=(B(I+1)*XD+Z(I+1))-A(I+1)*YD

5      CONTINUE

       X(K)=SNGL(YD)

       IF(ABS(X(K)).GT.1.E10) return 

10    CONTINUE                     

      IERROR=0

      RETURN

      END                      

