C SPECTR.FOR- MAIN PROGRAM FOR PC VERSION OF SPECTR, A TUTORIAL PROGRAM

C FOR TESTING SPECTRAL ESTIMATION, SIGNAL DETECTION, FILTERING, AND

C TRACKING SCHEMES POTENTIALLY USEFUL IN OUR EXPERIMENTAL WORK. DERIVED

C FROM FILMAN. POWERSTATION FORTRAN VERSION 10/93 REORGANIZED TO MAKE

C THE TRIAL/RECSET THE UNIT OF PROCESSING, SO THAT WE CAN EXPLORE MULTI-

C CHANNEL, LAPLACIAN, AND MAPPING SCHEMES. RAW DATA FOR ALL SELECTED 

C CHANNELS ARE READ INTO AN ALLOCATED ARRAY ("DATA"), WHICH IS PASSED TO

C A SUBROUTINE ("CONDITION") THAT PERFORMS ALL DATA-CONDITIONING

C OPERATIONS. THE DATA IS THEN PASSED AS AN ARRAY TO THE VARIOUS

C COMPUTATIONAL ROUTINES. COMPUTATIONAL WORKSPACE IS ALLOCATED AS

C NEEDED BY THE VARIOUS SUBROUTINES THAT CALCULATE SPECTRA, ETC.

	INCLUDE'FGRAPH.FI'

	PROGRAM SPECTR

	INCLUDE 'FGRAPH.FD'

	PARAMETER (IOMAX=66000,IMSIZE=788000)! CALCULATED FOR 1024X768,

	DIMENSION IDO(8),ICHAR(144),IHDR1(116),IX(2)    ! & 256 COLORS

	INTEGER*1 IMAGEBUF(IMSIZE)

	DIMENSION DATA[ALLOCATABLE](:,:)

	DIMENSION XFORM[ALLOCATABLE](:,:)

	DIMENSION WORK(IOMAX),WORK0(0:IOMAX-1)

	INTEGER*4 COUNT,CNTFLG,COUNT2,CNT2FG

	INTEGER*4 DUMMY(512),DUM2(512)

	CHARACTER*24 INPFIL,OUTFIL,MNTFIL

	CHARACTER*9 PTIT

	CHARACTER*4 MNT4(6),ICLABS

	CHARACTER*1 IYES,IIYES,INO,IINO,IANS

	COMMON IFLAG1,IFLAG2,IFLAG3,KNT,ISZ,ICHAN(64),ICLABS(6,64),MNTFIL

	COMMON/FLDES/ NG,NA,NC,ND,NF,NP,NR,IS,IBUF(IOMAX)

	COMMON/FLDESO/ NGO,NAO,NCO,NDO,NFO,NPO,NRO,ISO,IBUFO(IOMAX)

	COMMON/PTLST/ NLIST,LIST(2,72),NP1,NP2,NPTOT,P1,PT,DT,DF

	COMMON/DEV/ ITI,ILP

	COMMON/STDFIL/INPFIL, OUTFIL

	COMMON/CNTR1/ COUNT,CNTFLG,DUMMY,JREC1

	COMMON/CNTR2/ COUNT2,CNT2FG,DUM2,JREC2

	COMMON/IMAGE/IMAGEBUF

	EQUIVALENCE (IHDR1(1),NG),(IDO(1),NGO),(ICHAR(1),LIST(1,1))

	EQUIVALENCE (X,IX),(IX(1),IX1),(IX(2),IX2),(MNTFIL,MNT4)

	EQUIVALENCE (WORK,IBUFO),(WORK0,IBUFO)

	DATA IYES,IIYES,INO,IINO/'Y','y','N','n'/
	
	character*4 cibuf(iomax)
	equivalence (ibuf,cibuf)   ! Maciek

	ITI=6

	ILP=7

C  ILP IS PRINT DEVICE AND SHOULD BE OPENED/CLOSED BY ROUTINES THAT USE IT

	NRO=0

	ICOND=0 ! KEEPS TRACK OF ALL CONDITIONING OPS USED DURING SESSION

100   IFLAG1=-1

	KNT=0

C  IDENTIFY INPUT FILE AND READ FIRST HEADER

191   CALL GETOPN

	CALL GETSTD(IHDR1)  

	WRITE(ITI,920)(IBUF(I),I=1,108)

920   FORMAT(1H,18A4)        

	WRITE(ITI,1102)

1102  FORMAT('$FILE OK?(Y/N)>'\)

	READ(ITI,1014) IANS

1014  FORMAT(A1)

	IF(IANS.NE.INO .AND. IANS.NE.IINO)GO TO 189  

	CALL GETEND

	GO TO 191

189   ISO=IS

C READ SECOND HEADER WITH GROUP-VAR AND CHANNEL LABELS

	CALL GETSTD(IBUF)

	IF(NG) 102,102,103

102   WRITE(ITI,1002)

1002  FORMAT(' ERROR: FILE NOT IN STANDARD FORMAT')

	CALL GETEND

	GO TO 191

C GET .MNT FILE NAME FROM GROUP VAR 2

103   J0=6

	DO 5 I=1,6

c5     MNT4(I)=IBUF(J0+I)
5     MNT4(I)=cIBUF(J0+I)    ! Maciek

C identify record-set selection routine & execute initialization phase

	CALL RECSEL(ISEL)

	IF(ISEL.GT.1)CALL XEQ(ISEL,D1,ID1,ID2)  ! LAST 3 DUMMY ARGS

C PERFORM CHANNEL SELECTION; MODIFIED 10/92 TO USE LIST

113     WRITE(ITI,1005) (IBUF(I),I=1,6)

1005    FORMAT(//' CHANNEL GROUP ID=',6A4//' INPUT CHANNELS:')

	N=6*NG+1

	DO 104 I=1,NC,3

	K2=NC-I

	WRITE(ITI,1006)(I+K,(IBUF(J),J=N+6*K,N+6*K+4),K=0,MIN(K2,2))

1006    FORMAT(1H ,3(I3,'=',5A4,'     '))

104     N=N+18

	IF(NC-1) 102,141,142

 142    WRITE(ITI,2009)

 2009   FORMAT(/'$SELECT ALL CHANNELS?>'\)

	READ(ITI,1014)IANS

	IF(IANS.EQ.INO .OR. IANS.EQ.IINO)GO TO 1423

1421    NCS=NC

	DO 1422 I=1,NC

1422    ICHAN(I)=I

	GO TO 143

C NEW CHANNEL SELECTION, LIKE POINT SELECTION

1423    WRITE(ITI,1009)

1009    FORMAT(' CHANNEL SELECTION LIST(2 LINES)')

	READ(ITI,1016)(ICHAR(I),I=1,72)

	READ(ITI,1016)(ICHAR(I),I=73,144)

1016  FORMAT(72A1)

	CALL LISTPROC(NC,NCS)

	IF(NCS)1423,1423,14231

C INSERT SELECTED CHANNELS INTO ICHAN ARRAY FOR FURTHER PROCESSING

14231      K=1

	DO 120 I=1,NLIST

	NC1=LIST(1,I)

	DO 120 J=1,LIST(2,I)

	ICHAN(K)=NC1

	K=K+1

	NC1=NC1+1

120   CONTINUE

155   IF(NCS-1)156,143,150

156     WRITE(ITI,1025)

1025    FORMAT(' ERROR: NO VALID CHANNELS')

	GO TO 142

c channels identified; sort into order of reading(1,2,...)

153     J=ICHAN(I)

	ICHAN(I)=ICHAN(I-1)

	ICHAN(I-1)=J

150     DO 151 I=2,NCS

	IF(ICHAN(I-1)-ICHAN(I)) 151,152,153

151     CONTINUE

143   WRITE(ITI,*) ' CHANNELS SELECTED:'

	WRITE(ITI,10075) (ICHAN(I),I=1,NCS)

10075 FORMAT(1H ,16(I3,1X))

	WRITE(ITI,10076)

10076 FORMAT('$OK?>'\)

	READ(ITI,1014) IANS

	IF(IANS.EQ.INO .OR. IANS.EQ.IINO)GO TO 1423

	GO TO 170

152     DO 154 J=I,NCS

154     ICHAN(J-1)=ICHAN(J)

	NCS=NCS-1

	GO TO 155

141     NCS=1

	ICHAN(1)=1

170     NCO=NCS

C BYPASS FILMAN POINT SELECTION; SET LIST FOR USE BY XVAL

	NLIST=1

	LIST(1,1)=1

	LIST(2,1)=ND

	NDO=ND

	DT=1.0/FLOAT(IS)

	DF=FLOAT(IS)/FLOAT(ND)

	F1=0.

C STORE LABELS OF SELECTED CHANNELS

	DO 10 J=1,NCO

	I1=6*(NG+ICHAN(J))-5

	DO 10 I=1,6

c	ICLABS(I,J)=IBUF(I1)
	ICLABS(I,J)=cIBUF(I1)  !  Maciek

10    I1=I1+1

c everything set up; enter processing phase

202     IFLAG1=0

	NR1=NR/NC

	ALLOCATE(DATA(NDO,NCO),STAT=IERR) !NB- ALWAYS READ ENTIRE TRIAL

	ALLOCATE(XFORM(NC,NC),STAT=IERR)

203     IF(KNT) 401,204,204

204     continue

	IF(KNT-NR1) 208,401,401

208     CALL GETSTD(IBUF)

	KNT=KNT+1

	IFLAG2=1

	IF(ISEL.GT.1)CALL XEQ(ISEL,D1,ID1,ID2) ! LAST 3 AGAIN DUMMY

	IF(IFLAG2) 205,205,206

 205    IF(NC-1)2051,203,2051

2051  IF(KNT)401,401,2052 

2052  IF(KNT.LT.NR1)CALL GETREC(KNT+1)  !REPLACES LOOP OVER OTHER CHANS

	GO TO 203

C RECORD-SET HAS BEEN SELECTED; FINISH READING IT

206   I=1   ! INPUT CHANNEL COUNTER

	J=1   ! SELECTED CHANNEL COUNTER

212   IF(J-NCS) 213,213,480

213   IF(ICHAN(J)-I) 209,2091,209

2091  DO 215 L=1,NDO

	CALL XVAL(L,XR,XI)

215   DATA(L,J)=XR

	J=J+1

209     IF(I-NC) 211,480,480

211     I=I+1

	CALL GETSTD(IBUF)

	GO TO 212

C NOW PROCESS THIS RECORD -SET

480      WRITE(ITI,499)KNT

499     FORMAT(/' BEGIN PROCESSING FOR RECSET',I4)

	NCOND=0

300   CALL PTSEL  ! DETERMINES WHAT PART OF THE TIME RECORD TO PROCESS

	CALL CONDITION(DATA,NDO,NCO,XFORM,ICOND,NCOND)  ! NCO CAN CHANGE

210     WRITE(ITI,500)

500     FORMAT('$ NEXT:<CR>=CONT/1=REREAD RECSET/2=POINT SELECTION',

     + '/3=PROCESSOR/4=FILE/5=STOP >'\)

	READ(ITI,501)IGO

501     FORMAT(I1)

	GO TO(2052,250,260,320,401,450)IGO+1

250   CALL GETREC(KNT)

	CALL GETSTD(IBUF)

	GO TO 206

260   IF(NCOND.NE.0)WRITE(ITI,261)

261   FORMAT('$ REMEMBER THAT SOME PREPROCESSING HAS ALREADY OCCURRED!')

	GO TO 300

C IDENTIFY AND EXECUTE NEXT PROCESSING OPTION

320   CALL PROC(IPRO)

	CALL XEQ(IPRO,DATA,NDO,NCO)

	GO TO 210

401     CALL GETEND

	DEALLOCATE(DATA)

	DEALLOCATE(XFORM) ! OK IF XFORM ALWAYS ALLOCATED 

	GO TO 100

450   STOP

	END



C FILMAN SUBROUTINE TO PROCESS INPUT LISTS FOR CHANNELS & POINTS

	SUBROUTINE LISTPROC(NIN,NOUT)

	COMMON/PTLST/NLIST,LIST(2,72)

	COMMON/DEV/ITI

	DIMENSION ITBL(12),ICHAR(144)

	EQUIVALENCE (ICHAR,LIST)

	DATA ITBL/'0','1','2','3','4','5','6','7','8','9','-',','/

	ASSIGN 116 TO LAST

	NLIST=0

	J=0

	NOUT=0

116     N1=-1

117     N2=0

118     J=J+1

	IF(J-144) 120,120,119

120     DO 121 I=1,12

	IF(ITBL(I)-ICHAR(J)) 121,122,121

121     CONTINUE

	GO TO 118

122     GO TO(123,123,123,123,123,123,123,123,123,123,124,126),I

123     N2=N2*10+I-1

	GO TO 118

124     IF(N2) 131,131,125

125     IF(N2-NIN) 144,144,131

144     N1=N2

	GO TO 117

119     ASSIGN 132 TO LAST

126     IF(N2) 131,131,127

127     IF(N2-NIN) 145,145,131

145     IF(N1) 128,129,129

128     NLIST=NLIST+1

	NOUT=NOUT+1

	LIST(1,NLIST)=N2

	LIST(2,NLIST)=1

	GO TO LAST

129     N2=N2-N1+1

	IF(N2) 131,131,130

130     NLIST=NLIST+1

	NOUT=NOUT+N2

	LIST(1,NLIST)=N1

	LIST(2,NLIST)=N2

	GO TO LAST

131     WRITE(*,1017) J

1017    FORMAT(' ERROR: CHARACTER ',I3,', REENTER LIST')

	NOUT=0

132   RETURN

	END

C

C

C------------------------------------------------------------

	SUBROUTINE PTSEL  ! SELECTS TIME WINDOW ON INPUT DATA

	COMMON/FLDES/NG,NA,NC,ND,NF,NP,NR,IS,IBUF(1)

	COMMON/DEV/ITI,ILP,IO3,IO4

	COMMON/PTLST/NLIST,LIST(2,72),NP1,NP2,NPTOT,P1,PT

	CHARACTER*1 IA

	IF(NPTOT.EQ.0)GO TO 1

	WRITE(ITI,101)P1,PT

101     FORMAT('$   PTSEL: START=',F7.3,', LENGTH=',F7.3,'; CHANGE? >'\)

	READ(ITI,201)IA

	IF(IA.NE.'Y')RETURN

1       WRITE(ITI,100)

100     FORMAT('$   PTSEL: FIRST, LAST POINTS IN SECONDS >'\)

	READ(ITI,*)P1,PN

	IF(PN.GT.FLOAT(ND)/IS)GO TO 1 ! QUICK CHECK ON PTS VS. SECS

	NP1=P1*FLOAT(IS) + 1

	NP2=PN*FLOAT(IS)

	PT=PN-P1

	NPTOT=PT*FLOAT(IS)

	IF(NP2.GT.ND)GO TO 1

	WRITE(ITI,200)NP1,NP2,NPTOT

200     FORMAT('$    FIRST=',I5,'; LAST=',I5,'; N=',I5,'; OK? >'\)

	READ(ITI,201)IA

201     FORMAT(A1)

	IF(IA.EQ.'N')GO TO 1

	RETURN

	END



C-----------------------------------------------------

C SUBROUTINE VERSION OF XVAL FROM FILMAN 7/93

	SUBROUTINE XVAL(N,XR,XI)

	DIMENSION IV(2)

	COMMON/PTLST/ NLIST,LIST(2,72),NP1,NP2,NPTOT,P1,PT

	COMMON/FLDES/ NG,NA,NC,ND,NF,NP,NR,IS,IBUF(1)

	EQUIVALENCE (IV(1),IV1),(IV(2),IV2),(X,IX)

	J=0

	DO 1 I=1,NLIST

	K=J+LIST(2,I)

	IF(K-N) 1,2,2

1       J=K

	XR=0.

	RETURN

2       J=LIST(1,I)+N-J-1

	K=NG+NA

	GO TO(10,20,30,40)NF

10      XR=IBUF(J+K)

	RETURN

20      L=(J+1)/2

	I=J-L-L+2

	  CALL UNPACK(IBUF(K+L),IV1,IV2)

	XR=IV(I)

	RETURN

30    IX=IBUF(J+K)

	XR=X

	RETURN

40      J=K+J+J-1

	IX=IBUF(J)

	XR=X

	IX=IBUF(J+1)

	XI=X

	RETURN

	END

C-----------------------------------------------------        

C FUNCTION RECODE

	FUNCTION RECODE(X,K)

	GO TO(1,2,3,4)K

 1      RECODE=X

	RETURN

 2      IF(X.LE.0.)X=1.

	RECODE=SQRT(X)

	RETURN

 3      IF(X.LE.1.)X=1.

	RECODE=ALOG(X)

	RETURN

 4      RECODE=ABS(X)

	RETURN

	END

C------------------------------------------------------------

C TIMER.FOR- ELAPSED TIME IN SEC IS TIMER(T2)-TIMER(T1)

	SUBROUTINE TIMER(T)

	INTEGER*2 IHRS,IMIN,ISEC,ITCK

	CALL GETTIM(IHRS,IMIN,ISEC,ITCK)

	H=FLOAT(IHRS)

	FM=FLOAT(IMIN)

	S=FLOAT(ISEC)

	TK=FLOAT(ITCK)

	T=(H*360000.+FM*6000.+S*100.+TK)/100.

	RETURN

	END

C-----------------------------------------------------

C SUBROUTINE TO PERFORM ALL DATA-CONDITIONING OPERATIONS; EXTRACTED FROM

C OLD SPECTR AND ENHANCED WITH NEW OPTIONS 10/93 & 5/95. CURRENT OPTIONS 

C ARE:

C 1.DETRENDING  2.FIXED FILTERING  3.CYCLE-AVERAGING  4.8NN LAPLACIAN 

C 5.ARBITRARY LINEAR COMBINATIONS OF INPUT CHANNELS AND 6. LMS ADAPTIVE 

C FIR FILTERING

C THE ANALYSIS OPTIONS THE USER HAS EXERCISED ARE ENCODED IN 'ICOND' 

C USING 0/1 INDICATORS OF EACH, VIZ.

C ICOND=IDETRND+2**IFILT+4**ICYCL+8**LAPLACIAN+16**IARBLC(ETC). A

C SPECIAL FUNCTION IDONE(ICOND,IFN) DETERMINES WHETHER IFN HAS BEEN DONE

C DURING THIS SPECTR SESSION. NCOND COUNTS THE NUMBER OF CONDITIONING 

C OPERATIONS APPLIED TO THE CURRENT RECORDSET

C

	SUBROUTINE CONDITION(X,N,IC,XFM,ICOND,NCOND)

C PARAMETERS ARE DATA ARRAY,#PTS,#CHANS,XFORM ARRAY, & FLAGS AS ABOVE

	PARAMETER (IFIR=1024)   ! MAX ADAPTIVE FILTER LENGTH

	CHARACTER*24 MNTFIL,MNT2,CLABEL(64),PTIT

	COMMON IFLAG1,IFLAG2,IFLAG3,KNT,ISZ,ICHAN(64),ICLABS(6,64),MNTFIL

	COMMON/DEV/ITI

	COMMON/PTLST/NLIST,LIST(2,72),NP1,NP2,NPTOT,P1,PT,DT,DF

	COMMON/FLDES/NG,NA,NC,ND,NF,NP,NR,IS,IBUF(1)

	COMMON/FLDESO/NGO,NAO,NCO,NDO,NFO,NPO,NRO,ISO,WORK0(0:1)

	DIMENSION A(4,6),B(0:4,6),CF(4),PX(0:4,6),PY(4,6) ! FIXED FILTER

	DIMENSION WORK1[ALLOCATABLE](:)  ! ADAPTIVE FILTER WORKSPACE

	DIMENSION B2(0:IFIR),PX2(0:IFIR) ! ADAPTIVE FILTER ARRAYS

	DIMENSION X(N,IC),XFM(IC,IC)

	EQUIVALENCE (CF(1),CF1),(CF(2),CF2),(CF(3),CF3),(CF(4),CF4)

	EQUIVALENCE (ICLABS,CLABEL)

	DATA IYES,IIYES,INO,IINO/'Y','y','N','n'/

	WRITE(PTIT,9000)

9000    FORMAT('RAW DATA')

	ISETF=0

	MODE=0

	  CALL SPECPLOT(X,N,IC,NP1,NP2,1,IC,1,PTIT,0,0,0,ISETF,MODE)

C SIGNAL CONDITIONING OPTIONS

600   WRITE(ITI,601)

601   FORMAT('$  PREPROC:<CR>=NONE/1=DTRND/2=FIXEDFILT/3=CYCLEAVG' 

     + '/4=8NN/5=ARB. COMBS./6=ALE >'\)

	READ(ITI,'(I1)')IGO

	IF(IGO.EQ.0)RETURN

	NCOND=NCOND+1

	GO TO(610,620,630,700,800,900)IGO       

610   WRITE(ITI,611)

611     FORMAT('$  DETRENDING: 1=MEAN/2=MEAN AND TREND >'\)

	READ(ITI,'(I1)')K

	DO 615 L=1,IC

	CALL DETRND(X(NP1,L),NPTOT,K)

615   CONTINUE

	WRITE(PTIT,9001)K 

9001    FORMAT('DETREND',I1)

	 CALL SPECPLOT(X,N,IC,NP1,NP2,1,IC,1,PTIT,0,0,0,ISETF,MODE)

	 IF(IDONE(ICOND,1).NE.1)ICOND=ICOND+1

	GO TO 600

C FIXED DIGITAL FILTER SECTION; FIRST CHECK FOR EXISTING FILTER

620   IF(IDONE(ICOND,2))623,623,621

621   WRITE(ITI,622)

622   FORMAT('$  KEEP CURRENT FILTER? >'\)

	READ(ITI,'(A1)')IA

	IF(IA.NE.'N')GO TO 628

	GO TO 6231

C DESIGN THE FILTER USING STEARNS & DAVID ROUTINES

623   ICOND=ICOND+2

6231  WRITE(ITI,6232)

6232  FORMAT('$   FILTER TYPE:1=CHEBY1/2=CHEBY2/3=BUTTER >'\)

	READ(ITI,*)IFILT

	IF(IFILT.GT.3)GO TO 6231

6233  LS=4

	WRITE(ITI,6234)

6234  FORMAT('$   CHARACTERISTIC:1=LOWPASS/2=HIGHPASS/3=BANDPASS',

     1  '/4=BANDSTOP >'\)

	READ(ITI,*)IBAND

	IF(IBAND.GT.4)GO TO 6233

	IF(IBAND.LT.3)LS=2

	WRITE(ITI,6235)

6235  FORMAT('$   LOWER, UPPER CRITICAL FREQS(SEE S&D P.154) >'\)

	READ(ITI,*)(CF(I),I=1,4)

C CONVERT TO HZ-SECONDS

	DO 624 I=1,4

624   CF(I)=CF(I)/FLOAT(ISO)      

	WRITE(ITI,625)

625   FORMAT('$   # FILTER SECTIONS(.LE.6), REJECTION IN DB(>3.0) >'\)

	READ(ITI,*)NS,DB

	WRITE(ITI,*)IFILT,IBAND,NS,LS

	CALL SPIIRD(IFILT,IBAND,NS,LS,CF1,CF2,CF3,CF4,DB,B,A,IERR)

	IF(IERR.EQ.0)GO TO 627

	WRITE(ITI,626)IERR

626   FORMAT('$   DESIGN PROBLEM',I3,'; REDO SPECS(SEE S&D P.153)? >'\)

	READ(ITI,'(A1)')IA

	IF(IA.EQ.'Y')GO TO 623

	GO TO 600

C PAUSE TO REPORT THE FILTER COEFFICIENTS

627   DO 6271 J=1,NS

	WRITE(ITI,6272)J,(A(I,J),I=1,LS),(B(I,J),I=0,LS)

6272  FORMAT('   SECTION',I2,':',9F7.3)

6271  CONTINUE

	PAUSE 'FILTER READY; <CR> TO CONTINUE'

C APPLY THE FILTER; ADD REVERSAL CODE LATER**

628   DO 629 L=1,IC      

	K=0

	DO 6283 I=NP1,NP2

	WORK0(K)=X(I,L)

6283  K=K+1

	PX=0.

	PY=0.

	CALL SPCFLT(B,A,LS,NS,WORK0,NPTOT,PX,PY,IERR)

	IF(IERR.EQ.0)GO TO 6282

	WRITE(ITI,6281)IERR

6281  FORMAT('    RESPONSE OUT OF BOUNDS IN SECTION',I2\)

	READ(ITI,'(A1)')IA

	RETURN

6282  K=NP1

	DO 6284 I=1,NPTOT

	X(K,L)=WORK0(I-1)

6284  K=K+1

629   CONTINUE

	PTIT='FILTERED'

	CALL SPECPLOT(X,N,IC,NP1,NP2,1,IC,1,PTIT,0,0,0,ISETF,MODE)

	GO TO 600

C CROSS-CYCLE AVERAGING ROUTINE; FIRST CHECK FOR EXISTING SCHEME

630   IF(IDONE(ICOND,3))631,631,6301      

6301  WRITE(ITI,6302)

6302  FORMAT('$  KEEP CURRENT CYCLE-AVERAGING SCHEME? >'\)

	READ(ITI,'(A1)')IA

	IF(IA.NE.INO)GO TO 632

	GO TO 6312

631   ICOND=ICOND+4

6312  WRITE(ITI,6311)

6311  FORMAT('$  STIMULUS FREQUENCY? # RESPONSE CYCLES/BLOCK? >'\)

	READ(ITI,*)IFRQ,NCYC

	IF(MOD(IS,IFRQ).EQ.0)GO TO 632

	WRITE(ITI,'(A)') ' SAMPLE RATE MUST BE MULTIPLE OF STIM. FREQ.'

	GO TO 600

632   NPB=(IS/IFRQ)*NCYC      ! # POINTS PER BLOCK

	NB=NPTOT/NPB            ! # BLOCKS

	DO 640 L=1,IC

	CALL BLKAVR(X(NP1,L),NPTOT,NPB,NB)

640   CONTINUE

	WRITE(PTIT,633)NCYC                        ! NO RE-TRY OPTION ?**

633   FORMAT('AVERAGE OF',I3,' CYCLES')

	P1=FLOAT(NP1-1)*DT

	PT=FLOAT(NPB)*DT

	NPTOT=NPB

	NP2=NP1+NPB-1     ! OVERRIDE PTSEL FOR FURTHER PROCESSING

	ISETF=0     ! FORCE RECALCULATION OF PLOT LAYOUT

	CALL SPECPLOT(X,N,IC,NP1,NP2,1,IC,1,PTIT,0,0,0,ISETF,MODE)

	GO TO 600

C LAPLACIAN ROUTINE; FIRST CHECK FOR PREVIOUS USE

700   IF(IDONE(ICOND,4))710,710,750

C CALCULATE THE TRANSFORM FROM THE MONTAGE FILE

710   IF(NC.EQ.NCO)GO TO 720

	WRITE(ITI,'(A)')' ALL RECORDED CHANNELS MUST BE SELECTED'

	GO TO 600

720   MNT2='TEST'       ! NORMALLY =MNTFIL ****

	CALL MAKE8NN(MNT2,NC,XFM)

	ICOND=ICOND+8

C APPLY THE TRANSFORM & PLOT THE RESULTS

750   CALL MMPY(X,N,IC,IC,XFM)

	WRITE(PTIT,701)

701   FORMAT('LAPLACIAN')

	CALL SPECPLOT(X,N,IC,NP1,NP2,1,IC,1,PTIT,0,0,0,ISETF,MODE)  

C PRECEDING NEEDS ADJUSTMENT FOR COMPLEX DATA, E.G. FFT OUTPUTS ***

	GO TO 600

C ARBITRARY LINEAR COMBINATIONS ROUTINE

800   IF(IDONE(ICOND,5).EQ.0)GO TO 825

	WRITE(ITI,801)

801   FORMAT('$  KEEP CURRENT TRANSFORM? >'\)

	READ(ITI,'(A1)')IA

	IF(IA.NE.'N')GO TO 850

	GO TO 826

825   ICOND=ICOND+16

826   MNT2=MNTFIL

	CALL LINCOMB(MNT2,IC,NCOUT,XFM)

850   CALL MMPY(X,N,IC,NCOUT,XFM)

	WRITE(PTIT,802)

802   FORMAT('LIN.COMB.')

	ISETF=0     ! FORCE RECALCULATION OF PLOT LAYOUT

	CALL SPECPLOT(X,N,IC,NP1,NP2,1,NCOUT,1,PTIT,0,0,0,ISETF,MODE)

	GO TO 600

C ADAPTIVE LINE ENHANCEMENT; ADDED 5/95

C FIRST CHECK WHETHER IT'S ALREADY IN USE

900     IF(IDONE(ICOND,6))905,905,901

901     WRITE(ITI,902)

902     FORMAT('$  KEEP CURRENT ALE PARAMETERS? >'\)

	READ(ITI,'(A1)')IA

	IF(IA.NE.'N')GO TO 910

	GO TO 906

905     ICOND=ICOND+32

C GET FILTER PARAMETERS

906     WRITE(ITI,907)

907     FORMAT('$  ENTER DELAY, ORDER, CONVERGENCE(0<mu<<1),'

     +            ' AND FORGETTING(0<=ff<1) FACTORS'/'$   >'\)

	READ(ITI,*)ID,IL,FMU,FF

C ALLOW USER TO CONTROL DIRECTION OF FILTER APPLICATION        

	WRITE(ITI,9007)

9007    FORMAT('$  FILTER DIRECTION: 1=FORWARD/2=BACKWARD >'\)

	READ(ITI,*)IDIR

	GO TO (9008,9009)IDIR

9008    N1=NP1

	N2=NP2

	INC=1

	GO TO 910

9009    N1=NP2

	N2=NP1

	INC=-1

C APPLY THE ALE TO EACH CHANNEL IN TURN, RETURNING THE FILTERED OUTPUT

910     ALLOCATE(WORK1(0:NPTOT),STAT=IERR)

	DO 920 L=1,IC

	DO 911 I=0,ID-1

911     WORK0(I)=0.

	K=0

	SXSQ=0.

	DO 915 I=N1,N2,INC

	WORK1(K)=X(I,L)         ! THE "DESIRED" VECTOR

	WORK0(K+ID)=X(I,L)       ! THE DELAYED INPUT

	SXSQ=SXSQ+X(I,L)**2

915     K=K+1

C INITS

	SXSQ=SXSQ/FLOAT(NPTOT) ! SIGNAL POWER

	B2=0.

C        PX2=0. ! INITIAL VERSION

C LOAD PX2 WITH FLIPPED INITIAL SEGMENT OF THE DATA TO BE FILTERED

	DO 912 I=0,IL

912     PX2(I)=WORK0(I)

C NOTE: WE COULD ALSO INITIALIZE B2 TO APPROPRIATE COFS

C INVOKE STEARNS & DAVID ALE ROUTINE; CHAPTER 12

	CALL SPNLMS(WORK0,NPTOT,WORK1,B2,IL,FMU,SXSQ,FF,PX2,IERR)

	IF(IERR.EQ.0)GO TO 916

	WRITE(ITI,908)IERR

908     FORMAT('$  ALE ERROR ',I2,'; <CR> TO CONTINUE'\)

	READ(ITI,'(A1)')IA

C PLACE FILTERED OUTPUT BACK INTO SOURCE POSITIONS IN X ARRAY

916     K=N1

	DO 920 I=0,NPTOT-1

	X(K,L)=WORK0(I)

	K=K+INC

920     CONTINUE

	DEALLOCATE(WORK1)

C PLOT THE FILTERED OUTPUT

	PTIT='ALE FILTERED'

	ISETF=0 ! FORCES RESCALING OF FILTERED DATA

	CALL SPECPLOT(X,N,IC,NP1,NP2,1,IC,1,PTIT,0,0,0,ISETF,MODE)

	GO TO 600

	END                        

C FUNCTION TO DETERMINE FROM ICOND WHETHER DATA-CONDITIONING FUNCTION

C IFN HAS BEEN PERFORMED. CURRENTLY 6 FUNCTIONS 5/95

	FUNCTION IDONE(ICOND,IFN)

	DIMENSION ITYPE(6)

	IDONE=0

	IF(ICOND.EQ.0)RETURN

	DO 1 I=1,IFN

1     ITYPE(I)=0  

	IX=ICOND

	DO 2 I=1,IFN

	IT=MOD(IX,2)

	ITYPE(I)=IT

2     IX=(IX-IT)/2

	IF(ITYPE(IFN))4,4,3

3     IDONE=1

4     RETURN

	END

C SUBROUTINE TO AVERAGE OVER RESPONSE CYCLES

	SUBROUTINE BLKAVR(X,N,NPB,NB)

	DIMENSION X(N)

	FNB=FLOAT(NB)

	K=NPB+1     ! START LOOP AT FIRST POINT OF SECOND BLOCK

	DO 10 J=1,NB-1

	DO 10 I=1,NPB

	X(I)=X(I)+X(K)

10    K=K+1

	DO 20 I=1,NPB

20    X(I)=X(I)/FNB

	RETURN

	END

