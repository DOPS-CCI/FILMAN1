C FAD.FOR- ROUTINE TO FIT AR MODEL & CALCULATE FAD PARAMETERS CHANNEL-
C BY-CHANNEL USING THE METHOD OF FRANASZCZUK AND BLINOWSKA, LINEAR MODEL
C OF BRAIN ELECTRICAL ACTIVITY- EEG AS A SUPERPOSITION OF DAMPED
C OSCILLATORY MODES, BIOLOGICAL CYBERNETICS, 53:19-25,1985. 
C POSTPROCESSOR FADPROCS.FOR PLOTS FAD OUTPUT FILE IN MULTICHANNEL 
C FORMAT USING ROUTINES IN FADPLOT.FOR, INCLUDING ACCUMULATION OF 
C RESULTS ACROSS TRIALS IN 'RHYTHM DIAGRAMS' LIKE THOSE DESCRIBED IN
C BLINOWSKA ET AL A NEW METHOD OF PRESENTATION OF THE AVERAGE SPECTRAL
C PROPERTIES OF THE EEG TIME SERIES, INT J BIOMED COMP 22:97-106, 1988.
	SUBROUTINE FAD
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	INCLUDE 'MULTAR.INC'
	INCLUDE 'MAX.INC'
C      PARAMETER (MAXAR=20,MCHANS=64,MNPTS=33,MKN=6,IFADNR=4)
C MAXAR  - MAXIMAL AR MODEL ORDER
C MCHANS - MAXIMAL NUMBER OF CHANNELS (SOME SUBROUTINES
C          REQUIRE WORKARRAY)
C MNPTS  - NUMBER OF CALCULATION POINTS IN FREQUENCY DOMAIN (POWER SP)
C MKN    - NUMBER OF FUNCTIONS CALCULATED IN AR_SPECT
C IFADNR - NUMBER OF FAD PARAMETERS (B,BETA,OMEGA,FI)
C      PARAMETER (INTBMX=10)
C INTBMX - MAXIMAL NUMBER OF BORDERS OF DTF INTEGRATION RANGES
C	REAL WORK,RECODE,XV,XI,X,WYN,XDIM,YDIM,VALMX
	REAL RECODE,XV,XI,X,WYN,XDIM,YDIM,VALMX
	DIMENSION WORK[ALLOCATABLE](:,:)
	DIMENSION Q[ALLOCATABLE](:,:)
	DIMENSION V[ALLOCATABLE](:,:) 
	DIMENSION VECWRK[ALLOCATABLE](:)
	DIMENSION WYN(0:MAXAR/2+1,IFADNR+1,MCHANS)
C ORGANIZATION OF WYN: FOR EACH CHANNEL, ROW 0 CONTAINS INFORMATION
C ABOUT THE MODEL; WYN(0,1,.)=# POLES FOUND,WYN(0,2,.)=NYQUIST FREQ,
C WYN(0,3,.)=ERROR CODE, AND WYN(0,4,.)=MODEL ORDER USED. SUCCEEDING
C ROWS CONTAIN THE FAD PARAMETERS CALCULATED, CURRENTLY B=AMPLITUDE,
C BETA=DAMPING, PHI=PHASE, OMEGA=FREQUENCY, AND B*EXP(-BETA) WHICH IS
C CALCULATED ON THE FLY BY FAD_GRAPHICS.
	CHARACTER*1 INPFIL(64)
	CHARACTER*24 CLABEL(MCHANS)
C	DIMENSION ICLABS(6,MCHANS),ISTART(MCHANS,2)
	DIMENSION ICLABS(6,ICHMAX),ISTART(ICHMAX,2)
	logical usevss
	common /vss/ usevss
	COMMON IFLAG1,IFLAG2,IFLAG3,KNT,ISZ,ICHAN(1)
	COMMON/DEV/ITI
	COMMON/STDFIL/INPFIL
	COMMON/FLDES/ NG,NA,NC,ND,NF,NL,NR,IS,IBUF(1)
	COMMON/FLDESO/ NGO,NAO,NCO,NDO,NFO,NLO,NRO,ISO,IBUFO(1)
	COMMON /ARERR/ IERR
	EQUIVALENCE (ICLABS,CLABEL)
	EQUIVALENCE (X,IX)      ! AVOID CONVERTING REAL/INTEGER
	SAVE NDO1,WORK,Q,V,WYN,IORD,IORD0,IC,NPTS,KN,I1,N1
      SAVE CLABEL,XDIM,YDIM,ISTART,IFAD,VALMX,MODE,IMODE
      LOGICAL wrtout,OOK
	COMMON/STDFIL2/ OOK
      INTEGER*4 IMUID(4),IINPNM(16)
	DATA IMUID/'FAD ','OUTP','UT F','OR  '/
	COMMON /FIMU/IMUID,IsOutput,OUTFOR
	EQUIVALENCE (IINPNM,INPFIL)
	Logical IsOutput,NormT
      CHARACTER*52 OUTFOR
      SAVE wrtout,IPLOT,IALG,NormT,VECWRK,J1
	INTEGER*2 MAXX,MAXY
	LOGICAL ToPlot(5),EndPlot,WPPSF,SHDROK
	SAVE ToPlot,EndPlot,WPPSF,SHDROK
	character*128 ALINE
      COMMON /CPN/ CURPROCNAME
      CHARACTER*10 CURPROCNAME
      CHARACTER*1024 OUTNAME
      CHARACTER*1024 OUTFNM
	INTEGER*4 COUNT,CNTFLG,DUMMY(IPREC),JREC
	COMMON/CNTR1/COUNT,CNTFLG,DUMMY,JREC

C INITIALIZATION SECTION WITH USER DIALOGUE      
	IF(IFLAG1) 1,30,80
1     IERR=0
      CURPROCNAME='FAD'
	NDO1=NDO    ! # SELECTED INPUT POINTS
	NFO=3       ! REAL OUTPUT
	ToPlot=.TRUE.
	EndPlot=.FALSE.
	WPPSF=.FALSE.  ! Write output SYSTAT file
	SHDROK=.FALSE. ! SYSTAT file header not yet written
C STORE CHANNEL LABELS FOR USE IN PLOTS
	DO 15 I=1,NCO
	K=6*(NG+ICHAN(I))-5
!	DO 15 J=1,6
	DO 15 J=1,3  ! Shorter label
	ICLABS(J,I)=IBUF(K)
15    K=K+1
C ALSO MOVE LABELS TO OUTPUT FILE, WHICH IS ALWAYS WRITTEN
	J=6*NGO+109
	DO 3 I=1,NCO
	L=J+5
	K=6*(NG+ICHAN(I))-5
	DO 2 I1=J,L
	IBUFO(I1)=IBUF(K)
2     K=K+1
3     J=J+6
      J1=J

C Insert original file name as 5th line of description
      J=5*18+1
      DO 1603,I3=1,4
      IBUFO(J)=IMUID(I3)
1603  J=J+1
      DO 1604,I3=1,13
      IBUFO(J)=IINPNM(I3)
1604  J=J+1

	N1=NGO+NAO+1      ! INDEX TO FIRST OUTPUT POINT IN IBUFO
	
	IMODE=1
	usevss=.FALSE.
      IF(IsOutput)THEN
        IMODE=2
        CALL GETREC(1)
        IOPOS=117+6*(NG+NC)+NG+3
        IX=DUMMY(IOPOS)
        usevss=X.GT.100 ! Model order>100 => results are rescaled by vss
      ENDIF
	IPLOT=0
	WPPSF=.FALSE.  ! Write output SYSTAT file
      CALL DoFADParamsDialog(IMODE,IPLOT,wrtout,iord0,NormT,IALG,WPPSF)
	IORD=IORD0
C      OOK=wrtout   ! Don't ask for name in PUTOPN, open file
      OOK=.FALSE.
      wrtout=.TRUE. ! Always write regular FILMAN output file
      IF(WPPSF)THEN  ! Write output SYSTAT file?
        OUTNAME=OUTFNM(CURPROCNAME)
        LTRO=LEN_TRIM(OUTNAME)
        OUTNAME(LTRO-2:LTRO)='syd'
        CALL ADVMOPEN(OUTNAME)
	  IF(.NOT.SHDROK)THEN
	      CALL SYSWHF(IBUFO,108,IBUFO(109),MAXAR,NGO,NCO)
	      SHDROK=.TRUE.
	  ENDIF
      ENDIF
      IF(IMODE.EQ.2)THEN
        CALL FAD_PROCESS(WPPSF)
        RETURN
      ENDIF
	
!	WRITE(ITI,100)MAXAR
!100   FORMAT('$AR MODEL ORDER (.LE.',I3,'; 0=ESTIMATE BEST) >'\)
!C	READ(ITI,*)IORD0
!	READ(5,*)IORD0
!	IORD=IORD0
!	IPLOT=0     ! FLAG FOR ON-THE-FLY PLOTTING OPTION
!	WRITE(ITI,101)
!101   FORMAT('$PLOT FAD RESULTS? >'\)
!C	READ(ITI,'(A1)')IA
!	READ(5,'(A1)')IA
!	IF(IA.EQ.'Y')IPLOT=1
!	write(iti,1061)
!1061  format('$SCALE B PARAMETER BY SQRT(SS)? >'\)
!C	read(iti,'(a1)')ia
!	read(5,'(a1)')ia
!	usevss=ia.eq.'Y'
	
C SET NUMBER OF OUTPUT FREQUENCIES AND POINTS AS F(MODEL ORDER)
	IF(IORD)5,5,6
C FOR VARIABLE ORDERS ASSUME MAXAR
5     NDO=4*((MAXAR)/2+1+1)
	GO TO 20
6     NDO=4*((IORD)/2+1+1)
20    ISZ=NGO+NAO+NDO
	IC=1        ! CHANNEL COUNTER
	NPTS=MNPTS  ! FROM MULTAR.INC
	KN=MKN      !  "      "
25    ALLOCATE(WORK(NCO,NDO1),STAT=IERR)
	IF(IERR.NE.0)THEN
	 WRITE(ITI,*)'MULTAR ERROR: CANNOT ALLOCATE WORKSPACE (WORK)'
	 CALL ShowInfotext('MULTAR Error','CANNOT ALLOCATE WORKSPACE (WORK)')
	 RETURN
	ENDIF 
      ALLOCATE(VECWRK(NDO1),STAT=IERR)
	IF(IERR.NE.0)THEN
	 WRITE(ITI,*)'MULTAR ERROR: CANNOT ALLOCATE WORKSPACE (VECWRK)'
	 CALL ShowInfotext('MULTAR Error','CANNOT ALLOCATE WORKSPACE (VECWRK)')
	 RETURN
	ENDIF 
	ALLOCATE(Q(NCO,MAXAR*NCO),STAT=IERR)
	IF(IERR.NE.0)THEN
	 WRITE(ITI,*)'MULTAR ERROR: CANNOT ALLOCATE WORKSPACE (Q)'
	 CALL ShowInfotext('MULTAR Error','CANNOT ALLOCATE WORKSPACE (Q)')
	 GOTO 71
	ENDIF 
	ALLOCATE(V(NCO,NCO),STAT=IERR)
	IF(IERR.NE.0)THEN
	 WRITE(ITI,*)'MULTAR ERROR: CANNOT ALLOCATE WORKSPACE (V)'
	 CALL ShowInfotext('MULTAR Error','CANNOT ALLOCATE WORKSPACE (V)')
	 GOTO 72
	ENDIF 
	RETURN
73	DEALLOCATE(V)
72    DEALLOCATE(Q)	
71    DEALLOCATE(WORK)
      RETURN
      	
C EXECUTION PHASE- FIRST ASSEMBLE THE DATA MATRIX FOR THIS TRIAL
30    IF(IMODE.EQ.2)THEN
        CALL FAD_PROCESS(WPPSF)
        RETURN
      ENDIF
      DO 35 I=1,NDO1
	CALL XVAL(I,XV,XI)
35    WORK(IC,I)=RECODE(XV,IT)
	IC=IC+1
	IF(IC.LE.NCO) RETURN
40    IC=1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                     C
C DATA STORED IN MATRIX FORM; NOW DO THE CALCULATIONS C
C                                                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C	CALL ZEROF(WYN,(MAXAR/2+1+1)*IFADNR*MCHANS)
	WYN=0.
	DO 500,ICH=1,NCO
	IERR=0
	IORD=IORD0
C	CALL DZEROF(Q,1*1*MAXAR)      ! INITIALIZE STORAGE
C	CALL DZEROF(V,1*1)
	Q=0D0      ! INITIALIZE STORAGE
	V=0D0
	VECWRK=WORK(ICH,:) ! Sorry for this stupid solution. M.
C	CALL DO_AR(WORK(1,ICH),NDO1,1,IORD,Q,V,MAXAR,1*MAXAR,1) ! GETS COFS
	CALL DO_AR2(VECWRK,NDO1,1,IORD,Q,V,MAXAR,1*MAXAR,1,NormT,IALG,IARES)
	CALL DO_FAD(Q,WYN,ICH,IORD,LEN)   ! CALCULATES FAD PARMS FROM COFS
	IF(IARES.EQ.1)IORD0=IORD ! No more criteria calculations
C COPY 4 FAD PARAMETERS PER FREQUENCY FROM WYN TO IBUFO, STARTING
C AT FIRST POSITION AFTER ID VARS, AND WRITE THE OUTPUT RECORD FOR 
C THIS CHANNEL. BUT FIRST CHECK FOR COMPUTATIONAL PROBLEMS
	IF(WYN(0,3,ICH).EQ.0.)GO TO 300     ! NO ERRORS
	IF(IPLOT.EQ.0 .AND. IORD0.EQ.0) GO TO 300 ! PROBABLY NO USER
	WRITE(ITI,301)KNT,ICH,INT(WYN(0,3,ICH)),IORD
301   FORMAT('  ERROR AT RECSET',I4,' CHAN',I3,'; CODE=',I1,', ORD=',I2,
     + '; <CR> TO CONT. >'\)                              
C	READ(ITI,'(A1)')IA
!	READ(5,'(A1)')IA
	WRITE(ALINE,301)KNT,ICH,INT(WYN(0,3,ICH)),IORD
	Call ShowInfoText('Error',ALINE)
300   I1=N1
	DO 400 I=0,LEN
	DO 400 J=1,4
	X=WYN(I,J,ICH)        ! AVOID CONVERTING REAL TO INTEGER
	IBUFO(I1)=IX      !   VIA EQUIVALENCE (X,IX)
400   I1=I1+1
	CALL PUTSTD(IBUFO)
500   CONTINUE
	IF(IPLOT)90,90,50
C PLOT ALL RESULTS FOR THIS RECSET, DOING EACH PARAMETER IN TURN IN
C MULTICHANNEL FORMAT AND SCALED TO MAX VALUE IN ARRAY.
50    CONTINUE
      CALL DoPlotFADResultsDialog(ToPlot,KNT,EndPlot,IPLOT,NCO)
C      IF(EndPlot)RETURN
      IF(EndPlot)GOTO 90
      IF(IPLOT.NE.1)GOTO 90
      IFAD=0
	VALMX=0.
C SET UP FOR FAD GRAPHICS
	IERR=0
C	CALL GRAPHMODE_ON(MAXX,MAXY,.false.)
	CALL GRAPHMODE_ON(MAXX,MAXY,NROW,NCOL,NBITS,NCOLORS,0)
	IF(IERR.NE.0)STOP
	MMODE=2
	CALL SETUP(MAXX,MAXY,10,CLABEL,NCO,MMODE,ISTART,XDIM,YDIM)
	MODE=1      ! FAD_GRAPHICS PLOTS EACH PARAMETER IN TURN
55    CALL CALCBBETA(WYN,NCO)
	CALL FAD_GRAPHICS(MODE,WYN,LEN,NCO,CLABEL,IFAD,ISTART,INT(XDIM),
     $                  INT(YDIM),MAXX,MAXY,VALMX,ToPlot,ISTOP)
	CALL GRAPHMODE_OFF
	GOTO 50
90    CALL SHOWPROGRESS(KNT,NR/NC,70,'#',ITI)
	IF(WPPSF)THEN  ! Write output SYSTAT file?
	  CALL ADVANCEDFADSAVE(WYN,LEN,MAXAR/2+1,IFADNR+1,MCHANS,NCO,NGO)
      ENDIF
      RETURN

C TERMINATION PHASE
80    IF(IMODE.EQ.2)THEN
        CALL FAD_PROCESS(WPPSF)
        IF(WPPSF)CALL ADVMCLSE
        RETURN
      ENDIF
      DEALLOCATE(V)
	DEALLOCATE(Q)
	DEALLOCATE(VECWRK)
	DEALLOCATE(WORK)
	IERR=0
      IF(WPPSF)CALL ADVMCLSE
	RETURN
	END

C*************************************************************************

	SUBROUTINE DO_FAD(Q,WYN,IC,IORD,LEN)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	INCLUDE 'MULTAR.INC'
C      PARAMETER (MAXAR=20,MCHANS=64,MNPTS=33,MKN=6,IFADNR=4)
C MAXAR  - MAXIMAL AR MODEL ORDER
C MCHANS - MAXIMAL NUMBER OF CHANNELS (SOME SUBROUTINES
C          REQUIRE WORKARRAY)
C MNPTS  - NUMBER OF CALCULATION POINTS IN FREQUENCY DOMAIN (POWER SP)
C MKN    - NUMBER OF FUNCTIONS CALCULATED IN AR_SPECT
C IFADNR - NUMBER OF FAD PARAMETERS (B,BETA,OMEGA,FI)
C      PARAMETER (INTBMX=10)
C INTBMX - MAXIMAL NUMBER OF BORDERS OF DTF INTEGRATION RANGES
	DIMENSION Q(MAXAR+1)
	DIMENSION DN(MAXAR+1)
	DIMENSION BE(MAXAR),BETA(MAXAR),OMEGA(MAXAR),FI(MAXAR)
	DOUBLE PRECISION RR(MAXAR+1),RC(MAXAR+1)
C	DOUBLE PRECISION B(MAXAR+1),POL(MAXAR+1)
	DIMENSION WYN(0:MAXAR/2+1,IFADNR+1,MCHANS)
	REAL WYN,FP
	dimension vss(mchans)
	logical usevss
	common /vss/ usevss,vss
	COMMON /ARERR/ IERR
	COMMON /FLDES/ NG,NA,NC,ND,NF,NL,NR,IS,IBUF(1)
	COMMON /DEV/ ITI

	IF(IERR.NE.0)THEN
	 WYN(0,3,IC)=1.   ! AN AR ERROR OCCURRED
	 RETURN
	ENDIF
	WYN(0,4,IC)=IORD  ! SET MODEL ORDER FOR ERROR TRACING
	IF(usevss)WYN(0,4,IC)=WYN(0,4,IC)+100 ! Flag that vss was used
	
C	RR(1)=1D0
C	DO 11 I=2,IORD+1
C   11 RR(I)=Q(I-1)      ! RR=(0,COF1,....,COFIORD)
C	CALL DPRQD(B,IORD+1,RR,RC,POL,IR,IERR)  ! ROOTS RR POLYNOMIAL
	
      do 1,i=1,iord
    1 RR(i)=q(iord-i+1)
      RR(iord+1)=1d0
      call proots(RR,IORD,rr,rc,ierr) ! ROOTS RR POLYNOMIAL
	IF(IERR.NE.0)THEN
	 WRITE(ITI,*)'FAD ERROR'
	 Call ShowInfoText('Error','FAD ERROR')
	 WYN(0,3,IC)=2.
	 RETURN 
	ENDIF
	CALL RES(Q,DN,RR,RC,IORD) ! FORMS Cjreal AND Cjimag FROM ROOTS
	CALL MODREZ(Q,DN,RR,RC,BE,BETA,OMEGA,FI,IORD,LEN) ! FORMS FAD PARMS

	FP=REAL(IS)
	WYN(0,1,IC)=LEN
	WYN(0,2,IC)=FP*0.5
	DO 2,I=1,LEN
	if(usevss)then
	 WYN(I,1,IC)=BE(I)*vss(1) ! B parameter rescaled by sqrt(V)
	else
	 WYN(I,1,IC)=BE(I)
	endif
	WYN(I,2,IC)=-BETA(I)
	WYN(I,3,IC)=FI(I)
    2 WYN(I,4,IC)=OMEGA(I)*FP
    
	END

	SUBROUTINE RES(A,B,X,Y,N)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION X(N),Y(N),A(N),B(N)
	COMPLEX*16 Z,ZJ
	N1=1-N
	DO 10 J=1,N
	ZJ=CMPLX(X(J),Y(J))
	Z=ZJ**N1
	DO 20 I=1,N
	IF(I-J) 1,20,1
   1  Z=Z*(ZJ-CMPLX(X(I),Y(I)))
   20 CONTINUE
	Z=1D0/Z
	A(J)=DBLE(Z)
	B(J)=DIMAG(Z)
	IF(Y(J).EQ.0D0)B(J)=0D0
   10 CONTINUE
	END

	SUBROUTINE MODREZ(CR,CI,ZR,ZI,B,BETA,OMEGA,FI,N,M)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION CR(N),CI(N),ZR(N),ZI(N)
	double precision zr,zi
	DIMENSION B(N),BETA(N),FI(N),OMEGA(N)
	COMPLEX*16 ALFA
	DATA PI /3.14159265358979323846264338328D0/
	M=0
	DO 10 I=1,N
	IF(CI(I))10,20,5
    5 M=M+1
	B(M)=2D0*CABS(CMPLX(CR(I),CI(I)))
	FI(M)=ATAN2(CI(I),CR(I))/PI+.5D0-SIGN(.5D0,CR(I))
	ALFA=CLOG(CMPLX(ZR(I),ZI(I)))
	BETA(M)=REAL(ALFA)
	OMEGA(M)=.5D0*ABS(AIMAG(ALFA))/PI
	FI(M)=SIGN(FI(M),AIMAG(ALFA))
	GOTO 10
   20 CONTINUE
	M=M+1
	B(M)=ABS(CR(I))
	FI(M)=.5D0-SIGN(.5D0,CR(I))
C	BETA(M)=ALOG(ABS(ZR(I)))
	BETA(M)=LOG(ABS(ZR(I)))
	OMEGA(M)=.25D0-SIGN(.25D0,ZR(I))
   10 CONTINUE
	M1=M-1
	DO 50 I=1,M1
	MI=M-I
	DO 50 J=1,MI
	IF(OMEGA(J).LE.OMEGA(J+1))GOTO 50
	X=OMEGA(J)
	OMEGA(J)=OMEGA(J+1)
	OMEGA(J+1)=X
	X=B(J)
	B(J)=B(J+1)
	B(J+1)=X
	X=BETA(J)
	BETA(J)=BETA(J+1)
	BETA(J+1)=X
	X=FI(J)
	FI(J)=FI(J+1)
	FI(J+1)=X
   50 CONTINUE
	RETURN
	END
C *****************

      SUBROUTINE proots(a,m,rtr,rti,info)
      implicit double precision (a-h,o-z)
      include 'multar.inc'
C       PARAMETER (MAXAR=20,MCHANS=64,MNPTS=33,MKN=6,IFADNR=4)
C MAXAR  - MAXIMAL AR MODEL ORDER
C MCHANS - MAXIMAL NUMBER OF CHANNELS (SOME SUBROUTINES
C          REQUIRE WORKARRAY)
C MNPTS  - NUMBER OF CALCULATION POINTS IN FREQUENCY DOMAIN (POWER SP)
C MKN    - NUMBER OF FUNCTIONS CALCULATED IN AR_SPECT
C IFADNR - NUMBER OF FAD PARAMETERS (B,BETA,OMEGA,FI)
C      PARAMETER (INTBMX=10)
C INTBMX - MAXIMAL NUMBER OF BORDERS OF DTF INTEGRATION RANGES
      DIMENSION a(m+1),rtr(m),rti(m)
      double precision hess(MAXAR,MAXAR)
      double precision work(3*maxar)
      double precision dum
      if (m.gt.MAXar.or.a(m+1).eq.0.)then
c       write(iti,*)'Bad arguments in PROOTS'
       info=1
       return
      endif
      do 12 k=1,m
        hess(1,k)=-a(m+1-k)/a(m+1)
        do 11 j=2,m
          hess(j,k)=0d0
11      continue
        if (k.ne.m) hess(k+1,k)=1d0
12    continue
      call dgeev('N','N',m,hess,maxar,rtr,rti,dum,1,dum,2,work,3*m,
     $           info)
      return
      END
      
      SUBROUTINE CheckIfFADOutput(IBUF)
      DIMENSION IBUF(5)
      INTEGER*4 IBUF
      LOGICAL IsOutput
      CHARACTER*4 C4
      INTEGER*4 I4
      EQUIVALENCE (C4,I4)
	COMMON /FIMU/IMUID,IsOutput,OUTPFOR
      INTEGER*4 IMUID(4)
      CHARACTER*52 OUTPFOR
      
      IsOutput=.TRUE.
      Do 1,I=1,4
      IsOutput=IsOutput.AND.(IBUF(I).eq.IMUID(I))
      IF(.NOT.IsOutput)RETURN
1     CONTINUE
      Do 2,I=5,18
      I4=IBUF(I)
2     OUTPFOR((I-5)*4+1:(I-4)*4)=C4
      RETURN
      END      
      